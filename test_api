import requests
import urllib3
import logging
import json
import urllib3
import random
import psycopg2
import string
import time
import radar
import datetime
from requests.adapters import HTTPAdapter

base_url = 'https://127.0.0.1'
s = requests.Session()
s.mount('https://127.0.0.1/', HTTPAdapter(pool_connections=10))
connection = psycopg2.connect(user = "myuser",password = "password",host = "127.0.0.1",port = "5432", database = "postgres")
cur = connection.cursor()

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

logger = logging.getLogger(__name__)
logging.getLogger('urllib3').setLevel(logging.WARNING)


def signup_request(data):
	url = base_url +'/signup'
	headers = {'content-type':'application/json'}
	r = s.post(url=url, headers=headers, data=json.dumps(data), verify=False)
	return r

def create_group_request(ID,apikey,data):
	url = base_url +'/groups'
	headers = {'id': ID,'apikey': apikey,'content-type':'application/json'}
	r = s.post(url=url, headers=headers, data=json.dumps(data), verify=False)
	return r

def update_group_request(ID,apikey,data,gid):
	url = base_url +'/groups/'+gid
	headers = {'id': ID,'apikey': apikey,'content-type':'application/json'}
	r = s.put(url=url, headers=headers, data=json.dumps(data), verify=False)
	return r

def delete_group_request(ID,apikey,gid):
	url = base_url +'/groups/'+gid
	headers = {'id': ID,'apikey': apikey,'content-type':'application/json'}
	r = s.delete(url=url, headers=headers, verify=False)
	return r

def create_reservation_request(ID,apikey,data):
	url = base_url +'/reservations'
	headers = {'id': ID,'apikey': apikey,'content-type':'application/json'}
	r = s.post(url=url, headers=headers, data=json.dumps(data), verify=False)
	return r

def update_reservation_request(ID,apikey,data,rid):
	url = base_url + '/reservations/'+ rid
	headers = {'id': ID,'apikey': apikey,'content-type':'application/json'}
	r = s.put(url=url, headers=headers, data=json.dumps(data), verify=False)
	return r

def delete_reservation_request(ID,apikey,rid):
	url = base_url +'/reservations/' + rid
	headers = {'id': ID,'apikey': apikey,'content-type':'application/json'}
	r = s.delete(url=url, headers=headers, verify=False)
	return r

def create_asyncconfiguration_request(ID,apikey,data):
	url = base_url +'/async-configurations'
	headers = {'id': ID,'apikey': apikey,'content-type':'application/json'}
	r = s.post(url=url, headers=headers, data=json.dumps(data), verify=False)
	return r

def create_asyncwrite_request(ID,apikey,data):
	url = base_url +'/async-write'
	headers = {'id': ID,'apikey': apikey,'content-type':'application/json'}
	r = s.post(url=url, headers=headers, data=json.dumps(data), verify=False)
	return r

def device_status_request(ID,apikey,data):
	url = base_url + '/device-status'
	headers = {'id': ID,'apikey': apikey,'content-type':'application/json'}
	r = s.post(url=url, headers=headers, data=json.dumps(data), verify=False)
	return r

def operational_status_request(ID,apikey,data):
	url = base_url +'/operational-status'
	headers = {'id': ID,'apikey': apikey,'content-type':'application/json'}
	r = s.post(url=url, headers=headers, data=json.dumps(data),verify=False)
	return r

def create_syncconfiguration_request(ID,apikey,data):
	url = base_url +'/sync-configurations'
	headers = {'id': ID,'apikey': apikey,'content-type':'application/json'}
	r = s.post(url=url, headers=headers, data=json.dumps(data), verify=False)
	return r

def update_syncconfiguration_request(ID,apikey,data):
	url = base_url +'/sync-configurations'
	headers = {'id': ID,'apikey': apikey,'content-type':'application/json'}
	r = s.put(url=url, headers=headers, data=json.dumps(data), verify=False)
	return r

def delete_syncconfiguration_request(ID,apikey,data):
	url = base_url +'/sync-configurations'
	headers = {'id': ID,'apikey': apikey,'content-type':'application/json'}
	r = s.delete(url=url, headers=headers, data=json.dumps(data), verify=False)
	return r

def create_syncwrite_request(ID,apikey,data):
	url = base_url +'/sync-write'
	headers = {'id': ID,'apikey': apikey,'content-type':'application/json'}
	r = s.post(url=url, headers=headers, data=json.dumps(data), verify=False)
	return r

def update_syncwrite_request(ID,apikey,data):
	url = base_url +'/sync-write'
	headers = {'id': ID,'apikey': apikey,'content-type':'application/json'}
	r = s.put(url=url, headers=headers, data=json.dumps(data), verify=False)
	return r

def delete_syncwrite_request(ID,apikey,data):
	url = base_url +'/sync-write'
	headers = {'id': ID,'apikey': apikey,'content-type':'application/json'}
	r = s.delete(url=url, headers=headers, data=json.dumps(data), verify=False)
	return r

def open_channel_request(ID,apikey,data):
	url = base_url +'/open/channel'
	headers = {'id': ID,'apikey': apikey,'content-type':'application/json'}
	r = s.post(url=url, headers=headers, data=json.dumps(data), verify=False)
	return r

def suspend_channel_request(ID,apikey,data):
	url = base_url +'/suspend/channel'
	headers = {'id': ID,'apikey': apikey,'content-type':'application/json'}
	r = s.post(url=url, headers=headers, data=json.dumps(data), verify=False)
	return r

def resume_channel_request(ID,apikey,data):
	url = base_url +'/resume/channel'
	headers = {'id': ID,'apikey': apikey,'content-type':'application/json'}
	r = s.post(url=url, headers=headers, data=json.dumps(data), verify=False)
	return r

def close_channel_request(ID,apikey,data):
	url = base_url +'/close/channel'
	headers = {'id': ID,'apikey': apikey,'content-type':'application/json'}
	r = s.post(url=url, headers=headers, data=json.dumps(data), verify=False)
	return r



def signup_validcase():
	data = {"id" : "".join([random.choice(string.ascii_lowercase + string.digits) for i in range(5)])}
	req = signup_request(data)
	check(req,201)

def signup_no_id():
	data = {}
	req = signup_request(data)
	check(req,400)

def signup_id_already_existing():
	query = """select * from users"""
    	cur.execute(query)
    	record = cur.fetchone()
	data = {"id" : record[0]}
	req = signup_request(data)
	check(req,409)

def signup_id_length_exceeded():
	data = {"id" : "".join([random.choice(string.ascii_lowercase + string.digits) for i in range(51)])}
	req = signup_request(data)
	check(req,400)

def signup_id_not_alphanumeric():
	data = {"id" : "@".join([random.choice(string.ascii_lowercase + string.digits) for i in range(5)])}
	req = signup_request(data)
	check(req,400)



def creategroup_validcase(ID, apikey):
	device = "".join([random.choice(string.ascii_lowercase + string.digits) for i in range(5)])
	cur.execute("""INSERT INTO devices (did,accessibility) VALUES(%s,%s)""",(device,'public'))
	connection.commit()	
	data = {"group-name":"".join([random.choice(string.ascii_lowercase + string.digits) for i in range(5)]), "resources" : [device]}
	req = create_group_request(ID,apikey,data)
	check(req,201)

def creategroup_groupname_already_existing(ID, apikey):
	device = "".join([random.choice(string.ascii_lowercase + string.digits) for i in range(5)])
	cur.execute("""INSERT INTO devices (did,accessibility) VALUES(%s,%s)""",(device,'public'))
	connection.commit()	 
	query = """select * from groups where uid = %s"""
    	cur.execute(query, (ID, ))
    	record = cur.fetchone()
	group = record[2]
	uid,gn = group.split('-')
	data = {"group-name":gn, "resources" : [device]}
	req = create_group_request(ID,apikey,data)
	check(req,409)

def creategroup_no_groupname(ID, apikey):
	device = "".join([random.choice(string.ascii_lowercase + string.digits) for i in range(5)])
	cur.execute("""INSERT INTO devices (did,accessibility) VALUES(%s,%s)""",(device,'public'))
	connection.commit()	 
	data = {"resources" : [device]}
	req = create_group_request(ID,apikey,data)
	check(req,201)

def creategroup_no_body(ID, apikey):
	data = {}
	req = create_group_request(ID,apikey,data)
	check(req,400)

def creategroup_no_resources(ID, apikey):
	data = {"group-name":"".join([random.choice(string.ascii_lowercase + string.digits) for i in range(5)])}
	req = create_group_request(ID,apikey,data)
	check(req,400)

def creategroup_admin_resources(ID, apikey):
	device = "".join([random.choice(string.ascii_lowercase + string.digits) for i in range(5)])
	cur.execute("""INSERT INTO devices (did,accessibility) VALUES(%s,%s)""",(device,'admin'))
	connection.commit()	
	data = {"group-name":"".join([random.choice(string.ascii_lowercase + string.digits) for i in range(5)]),"resources" : [device]}
	req = create_group_request(ID,apikey,data)
	check(req,400)

def creategroup_invalid_resources(ID, apikey):
	device = "".join([random.choice(string.ascii_lowercase + string.digits) for i in range(5)])	
	data = {"group-name":"".join([random.choice(string.ascii_lowercase + string.digits) for i in range(5)]),"resources" : [device]}
	req = create_group_request(ID,apikey,data)
	check(req,400)

def create_group_groupname_not_alphanumeric(ID, apikey):
	device = "".join([random.choice(string.ascii_lowercase + string.digits) for i in range(5)])
	cur.execute("""INSERT INTO devices (did,accessibility) VALUES(%s,%s)""",(device,'admin'))
	connection.commit()	
	data = {"group-name":"@".join([random.choice(string.ascii_lowercase + string.digits) for i in range(5)]), "resources" : [device]}
	req = create_group_request(ID,apikey,data)
	check(req,400)

def create_group_groupname_length_exceeded(ID, apikey):
	device = "".join([random.choice(string.ascii_lowercase + string.digits) for i in range(5)])
	cur.execute("""INSERT INTO devices (did,accessibility) VALUES(%s,%s)""",(device,'admin'))
	connection.commit()	
	data = {"group-name": "".join([random.choice(string.ascii_lowercase + string.digits) for i in range(51)]), "resources" : [device]}
	req = create_group_request(ID,apikey,data)
	check(req,400)



def update_group_validcase(ID,apikey):
	device = "".join([random.choice(string.ascii_lowercase + string.digits) for i in range(5)])
	cur.execute("""INSERT INTO devices (did,accessibility) VALUES(%s,%s)""",(device,'public'))
	connection.commit()	
	query = """select * from groups where uid = %s"""
    	cur.execute(query,(ID, ))
    	record = cur.fetchone()
	data = {"resources" : [device]}
	gid = record[2]
	req = update_group_request(ID,apikey,data,gid)
	check(req,200)

def update_group_no_resources(ID,apikey):
	data = {}
	query = """select * from groups where uid = %s"""
    	cur.execute(query,(ID, ))
    	record = cur.fetchone()
	gid = record[2]
	req = update_group_request(ID,apikey,data,gid)
	check(req,400)

def update_group_admin_resources(ID,apikey):
	device = "".join([random.choice(string.ascii_lowercase + string.digits) for i in range(5)])
	cur.execute("""INSERT INTO devices (did,accessibility) VALUES(%s,%s)""",(device,'admin'))
	connection.commit()
	data = {"resources" : [device]}
	query = """select * from groups where uid = %s"""
    	cur.execute(query,(ID, ))
    	record = cur.fetchone()
	gid = record[2]
	req = update_group_request(ID,apikey,data,gid)
	check(req,400)

def update_group_invalid_resources(ID,apikey):
	device = "".join([random.choice(string.ascii_lowercase + string.digits) for i in range(5)])
	data = {"resources" : [device]}
	query = """select * from groups where uid = %s"""
    	cur.execute(query,(ID, ))
    	record = cur.fetchone()
	gid = record[2]
	req = update_group_request(ID,apikey,data,gid)
	check(req,400)

def update_group_gid_empty(ID,apikey):
	device = "".join([random.choice(string.ascii_lowercase + string.digits) for i in range(5)])
	cur.execute("""INSERT INTO devices (did,accessibility) VALUES(%s,%s)""",(device,'admin'))
	connection.commit()
	data = {"resources" : [device]}
	gid = ''
	req = update_group_request(ID,apikey,data,gid)
	check(req,404)

def update_group_someoneelse_gid(ID,apikey):
	device = "".join([random.choice(string.ascii_lowercase + string.digits) for i in range(5)])
	cur.execute("""INSERT INTO devices (did,accessibility) VALUES(%s,%s)""",(device,'admin'))
	connection.commit()
	data = {"resources" : [device]}
	query = """select * from groups where uid != %s"""
    	cur.execute(query,(ID, ))
    	record = cur.fetchone()
	gid = record[2]
	req = update_group_request(ID,apikey,data,gid)
	check(req,400)



def delete_group_validcase(ID,apikey):
	query = """select * from groups where uid = %s"""
    	cur.execute(query,(ID, ))
    	record = cur.fetchone()
	gid = record[2]
	req = delete_group_request(ID,apikey,gid)
	check(req,200)

def delete_group_invalid_gid(ID,apikey):
	gid = "".join([random.choice(string.ascii_lowercase + string.digits) for i in range(5)])
	req = delete_group_request(ID,apikey,gid)
	check(req,400)

def delete_group_gid_empty(ID,apikey):
	gid = ''
	req = delete_group_request(ID,apikey,gid)
	check(req,404)

def delete_group_someoneelse_gid(ID,apikey):
	query = """select * from groups where uid != %s"""
    	cur.execute(query,(ID, ))
    	record = cur.fetchone()
	gid = record[2]
	req = delete_group_request(ID,apikey,gid)
	check(req,400)



def generate_dates(start_date, end_date):
	return (start_date + datetime.timedelta(days=d) for d in xrange((end_date - start_date).days + int(random.randint(1,100))))


def create_reservation_validcase(ID,apikey):
	query = """select * from groups where uid = %s"""
    	cur.execute(query,(ID, ))
    	record = cur.fetchone()
	gid = record[2]
	start_date = datetime.date(2019, 7, 2)
	end_date = datetime.date(2020, 12, 31)
	for current_date in generate_dates(start_date, end_date):
		date = current_date.strftime('%Y-%m-%d')
	start_time = date + " 12:00:00"
	end_time = date + " 14:00:00"
	data = {"gid":gid,"start-time":start_time,"end-time":end_time}
	req = create_reservation_request(ID,apikey,data)
	check(req,201)

def create_reservation_frequency_duration_given(ID,apikey):
	query = """select * from groups where uid = %s"""
    	cur.execute(query,(ID, ))
    	record = cur.fetchone()
	gid = record[2]
	start_date = datetime.date(2019, 7, 2)
	end_date = datetime.date(2020, 12, 31)
	for current_date in generate_dates(start_date, end_date):
		date = current_date.strftime('%Y-%m-%d')
	start_time = date + " 14:00:00"
	end_time = date + " 16:00:00"
	data = {"gid":gid,"start-time":start_time,"end-time":end_time,"frequency":"hourly","duration":"1:10"}
	req = create_reservation_request(ID,apikey,data)
	check(req,201)

def create_reservation_duration_exceeds_reservationtime(ID,apikey):
	query = """select * from groups where uid = %s"""
    	cur.execute(query,(ID, ))
    	record = cur.fetchone()
	gid = record[2]
	start_date = datetime.date(2019, 7, 2)
	end_date = datetime.date(2020, 12, 31)
	for current_date in generate_dates(start_date, end_date):
		date = current_date.strftime('%Y-%m-%d')
	start_time = date + " 10:00:00"
	end_time = date + " 12:00:00"
	data = {"gid":gid,"start-time":start_time,"end-time":end_time,"frequency":"hourly","duration":"02:02:10"}
	req = create_reservation_request(ID,apikey,data)
	check(req,400)

def create_reservation_wrong_datetime_format(ID,apikey):
	query = """select * from groups where uid = %s"""
    	cur.execute(query,(ID, ))
    	record = cur.fetchone()
	gid = record[2]
	start_date = datetime.date(2019, 7, 2)
	end_date = datetime.date(2020, 12, 31)
	for current_date in generate_dates(start_date, end_date):
		date = current_date.strftime('%Y-%d-%m')
	start_time = date + " 08:00:00"
	end_time = date + " 10:00:00"
	data = {"gid":gid,"start-time":start_time,"end-time":end_time,"frequency":"hourly","duration":"02:02:10"}
	req = create_reservation_request(ID,apikey,data)
	check(req,400)

def create_reservation_someoneelse_gid(ID,apikey):
	query = """select * from groups where uid != %s"""
    	cur.execute(query,(ID, ))
    	record = cur.fetchone()
	gid = record[2]
	start_date = datetime.date(2019, 7, 2)
	end_date = datetime.date(2020, 12, 31)
	for current_date in generate_dates(start_date, end_date):
		date = current_date.strftime('%Y-%m-%d')
	start_time = date + " 08:00:00"
	end_time = date + " 10:00:00"
	data = {"gid":gid,"start-time":start_time,"end-time":end_time}
	req = create_reservation_request(ID,apikey,data)
	check(req,400)

def create_reservation_no_gid(ID,apikey):
	start_date = datetime.date(2019, 7, 2)
	end_date = datetime.date(2020, 12, 31)
	for current_date in generate_dates(start_date, end_date):
		date = current_date.strftime('%Y-%m-%d')
	start_time = date + " 08:00:00"
	end_time = date + " 10:00:00"
	data = {"start-time":start_time,"end-time":end_time}
	req = create_reservation_request(ID,apikey,data)
	check(req,400)

def create_reservation_alreadyreserved(ID,apikey):
	query = """select * from groups where uid = %s"""		    
	cur.execute(query, (ID, ))
    	records = cur.fetchone()
	gid = records[2]
	start_date = datetime.date(2019, 7, 2)
	end_date = datetime.date(2020, 12, 31)
	for current_date in generate_dates(start_date, end_date):
		date = current_date.strftime('%Y-%m-%d')
	start_time = date + " 06:00:00"
	end_time = date + " 07:00:00"
	data = {"gid":gid,"start-time":start_time,"end-time":end_time}
	req = create_reservation_request(ID,apikey,data)
	data = {"gid":gid,"start-time":start_time,"end-time":end_time}
	req = create_reservation_request(ID,apikey,data)
	check(req,409)

def create_reservation_frequencygiven_noduration(ID,apikey):
	query = """select * from groups where uid = %s"""
    	cur.execute(query,(ID, ))
    	record = cur.fetchone()
	gid = record[2]
	start_date = datetime.date(2019, 7, 2)
	end_date = datetime.date(2020, 12, 31)
	for current_date in generate_dates(start_date, end_date):
		date = current_date.strftime('%Y-%m-%d')
	start_time = date + " 08:00:00"
	end_time = date + " 10:00:00"
	data = {"gid":gid,"start-time":start_time,"end-time":end_time,"frequency":"hourly"}
	req = create_reservation_request(ID,apikey,data)
	check(req,400)

def create_reservation_invalid_frequency(ID,apikey):
	query = """select * from groups where uid = %s"""
    	cur.execute(query,(ID, ))
    	record = cur.fetchone()
	gid = record[2]
	start_date = datetime.date(2019, 7, 2)
	end_date = datetime.date(2020, 12, 31)
	for current_date in generate_dates(start_date, end_date):
		date = current_date.strftime('%Y-%m-%d')
	start_time = date + " 08:00:00"
	end_time = date + " 10:00:00"
	data = {"gid":gid,"start-time":start_time,"end-time":end_time,"frequency":"".join([random.choice(string.ascii_lowercase + string.digits) for i in range(5)])}
	req = create_reservation_request(ID,apikey,data)
	check(req,400)

def create_reservation_endtime_before_starttime(ID,apikey):
	query = """select * from groups where uid != %s"""
    	cur.execute(query,(ID, ))
    	record = cur.fetchone()
	gid = record[2]
	start_date = datetime.date(2019, 7, 2)
	end_date = datetime.date(2020, 12, 31)
	for current_date in generate_dates(start_date, end_date):
		date = current_date.strftime('%Y-%m-%d')
	start_time = date + " 08:00:00"
	end_time = date + " 07:00:00"
	data = {"gid":gid,"start-time":start_time,"end-time":end_time}
	req = create_reservation_request(ID,apikey,data)
	check(req,400)

def create_reservation_starttime_already_passed(ID,apikey):
	query = """select * from groups where uid = %s"""
    	cur.execute(query,(ID, ))
    	record = cur.fetchone()
	gid = record[2]
	start_date = datetime.date(2018, 7, 2)
	end_date = datetime.date(2018, 12, 31)
	for current_date in generate_dates(start_date, end_date):
		date = current_date.strftime('%Y-%m-%d')
	start_time = date + " 08:00:00"
	end_time = date + " 10:00:00"
	data = {"gid":gid,"start-time":start_time,"end-time":end_time}
	req = create_reservation_request(ID,apikey,data)
	check(req,400)

def create_reservation_no_starttime_noendtime(ID,apikey):
	query = """select * from groups where uid = %s"""
    	cur.execute(query,(ID, ))
    	record = cur.fetchone()
	gid = record[2]
	data = {"gid":gid}
	req = create_reservation_request(ID,apikey,data)
	check(req,400)

def create_reservation_no_starttime(ID,apikey):
	query = """select * from groups where uid = %s"""
    	cur.execute(query,(ID, ))
    	record = cur.fetchone()
	gid = record[2]
	start_date = datetime.date(2019, 7, 2)
	end_date = datetime.date(2020, 12, 31)
	for current_date in generate_dates(start_date, end_date):
		date = current_date.strftime('%Y-%m-%d')
	end_time = date + " 10:00:00"
	data = {"gid":gid,"end-time":end_time}
	req = create_reservation_request(ID,apikey,data)
	check(req,400)

def create_reservation_no_endtime(ID,apikey):
	query = """select * from groups where uid = %s"""
    	cur.execute(query,(ID, ))
    	record = cur.fetchone()
	gid = record[2]
	start_date = datetime.date(2019, 7, 2)
	end_date = datetime.date(2020, 12, 31)
	for current_date in generate_dates(start_date, end_date):
		date = current_date.strftime('%Y-%m-%d')
	start_time = date + " 08:00:00"
	data = {"gid":gid,"frequency":"hourly","start-time":start_time}
	req = create_reservation_request(ID,apikey,data)
	check(req,400)



def update_reservation_wrong_datetime_format(ID,apikey):
	query = """select * from reservations_info where uid = %s"""
    	cur.execute(query,(ID, ))
    	record = cur.fetchone()
	rid = record[0]
	start_date = datetime.date(2019, 7, 2)
	end_date = datetime.date(2020, 12, 31)
	for current_date in generate_dates(start_date, end_date):
		date = current_date.strftime('%Y-%d-%m')
	start_time = date + " 08:00:00"
	end_time = date + " 29:00:00"
	data = {"start-time":start_time,"end-time":end_time}
	req = update_reservation_request(ID,apikey,data,rid)
	check(req,400)

def update_reservation_invalid_frequency(ID,apikey):
	query = """select * from reservations_info where uid = %s"""
    	cur.execute(query,(ID, ))
    	record = cur.fetchone()
	rid = record[0]
	data = {"frequency":"".join([random.choice(string.ascii_lowercase + string.digits) for i in range(5)])}
	req = update_reservation_request(ID,apikey,data,rid)
	check(req,400)

def update_reservation_no_starttime_noendtime(ID,apikey):
	query = """select * from reservations_info where uid = %s"""
    	cur.execute(query,(ID, ))
    	record = cur.fetchone()
	rid = record[0]
	data = {"duration":"1:08"}
	req = update_reservation_request(ID,apikey,data,rid)
	check(req,200)

def update_reservation_invalid_rid(ID,apikey):
	rid = "".join([random.choice(string.ascii_lowercase + string.digits) for i in range(5)])
	start_date = datetime.date(2019, 7, 2)
	end_date = datetime.date(2020, 12, 31)
	for current_date in generate_dates(start_date, end_date):
		date = current_date.strftime('%Y-%m-%d')
	start_time = date + " 06:00:00"
	end_time = date + " 07:00:00"
	data = {"start-time":start_time,"end-time":end_time}
	req = update_reservation_request(ID,apikey,data,rid)
	check(req,400)

def update_reservation_someoneelse_rid(ID,apikey):
	query = """select * from reservations_info where uid != %s"""
    	cur.execute(query,(ID, ))
    	record = cur.fetchone()
	rid = record[0]
	start_date = datetime.date(2019, 7, 2)
	end_date = datetime.date(2020, 12, 31)
	for current_date in generate_dates(start_date, end_date):
		date = current_date.strftime('%Y-%m-%d')
	start_time = date + " 06:00:00"
	end_time = date + " 07:00:00"
	data = {"start-time":start_time,"end-time":end_time}
	req = update_reservation_request(ID,apikey,data,rid)
	check(req,400)

def update_reservation_alreadyreserved(ID,apikey):
	query = """select * from reservations_info where uid = %s"""
    	cur.execute(query,(ID, ))
    	record = cur.fetchone()
	rid = record[0]
	data = {"start-time":"2019-06-27 15:55:00","end-time":"2019-06-27 16:00:00"}
	req = update_reservation_request(ID,apikey,data,rid)
	check(req,409)

def update_reservation_invalid_frequency(ID,apikey):
	query = """select * from reservations_info where uid = %s"""
    	cur.execute(query,(ID, ))
    	record = cur.fetchone()
	rid = record[0]
	data = {"start-time":"2020-06-28 14:00:00","end-time":"2020-06-28 16:00:00","frequency":"ant"}
	req = update_reservation_request(ID,apikey,data,rid)
	check(req,400)

def update_reservation_endtime_before_starttime(ID,apikey):
	query = """select * from reservations_info where uid = %s"""
    	cur.execute(query,(ID, ))
    	record = cur.fetchone()
	rid = record[0]
	start_date = datetime.date(2019, 7, 2)
	end_date = datetime.date(2020, 12, 31)
	for current_date in generate_dates(start_date, end_date):
		date = current_date.strftime('%Y-%m-%d')
	start_time = date + " 09:00:00"
	end_time = date + " 07:00:00"
	data = {"start-time":start_time,"end-time":end_time}
	req = update_reservation_request(ID,apikey,data,rid)
	check(req,400)

def update_reservation_starttime_already_passed(ID,apikey):
	query = """select * from reservations_info where uid = %s"""
    	cur.execute(query,(ID, ))
    	record = cur.fetchone()
	rid = record[0]
	start_date = datetime.date(2018, 7, 2)
	end_date = datetime.date(2018, 12, 31)
	for current_date in generate_dates(start_date, end_date):
		date = current_date.strftime('%Y-%m-%d')
	start_time = date + " 08:00:00"
	end_time = date + " 10:00:00"
	data = {"start-time":start_time,"end-time":end_time}
	req = update_reservation_request(ID,apikey,data,rid)
	check(req,400)

def update_reservation_duration_exceeds_reservationtime(ID,apikey):
	query = """select * from reservations_info where uid = %s"""
    	cur.execute(query,(ID, ))
    	record = cur.fetchone()
	rid = record[0]
	start_date = datetime.date(2019, 7, 2)
	end_date = datetime.date(2020, 12, 31)
	for current_date in generate_dates(start_date, end_date):
		date = current_date.strftime('%Y-%m-%d')
	start_time = date + " 06:00:00"
	end_time = date + " 07:00:00"
	data = {"start-time":start_time,"end-time":end_time,"duration":"2:10:00"}
	req = update_reservation_request(ID,apikey,data,rid)
	check(req,400)

def update_reservation_no_rid(ID,apikey):
	rid = ''
	start_date = datetime.date(2019, 7, 2)
	end_date = datetime.date(2020, 12, 31)
	for current_date in generate_dates(start_date, end_date):
		date = current_date.strftime('%Y-%m-%d')
	start_time = date + " 06:00:00"
	end_time = date + " 07:00:00"
	data = {"start-time":start_time,"end-time":end_time,"duration":"2:10:00"}
	req = update_reservation_request(ID,apikey,data,rid)
	check(req,404)



def delete_reservation_no_rid(ID,apikey):
	rid = ''
	req = delete_reservation_request(ID,apikey,rid)
	check(req,404)

def delete_reservation_someoneelse_rid(ID,apikey):
	query = """select * from reservations_info where uid != %s"""
    	cur.execute(query,(ID, ))
    	record = cur.fetchone()
	rid = record[0]
	req = delete_reservation_request(ID,apikey,rid)
	check(req,400)

def delete_reservation_invalid_rid(ID,apikey):
	rid = "".join([random.choice(string.ascii_lowercase + string.digits) for i in range(15)])
	req = delete_reservation_request(ID,apikey,rid)
	check(req,400)

def delete_reservation_valid_rid(ID,apikey):
	query = """select * from reservations_info where uid = %s"""
    	cur.execute(query,(ID, ))
    	record = cur.fetchone()
	rid = record[0]
	req = delete_reservation_request(ID,apikey,rid)
	check(req,200)



def open_channel_validcase(ID,apikey):
	time_now = datetime.datetime.now()
	query = """select * from groups where uid = %s"""
    	cur.execute(query,(ID, ))
    	record = cur.fetchone()
	gid = record[2]
	start_time = time_now.strftime('%Y-%m-%d %H:%M:%S')
	end_time = time_now.strftime('%Y-%m-%d') + " 24:00:00"
	data = {"gid":gid,"start-time":str(start_time),"end-time":str(end_time)}
	req1 = create_reservation_request(ID,apikey,data)
	check(req1,201)
        now_seconds = time.mktime(time_now.timetuple())
	query = """select * from reservations_info as i , reservations as r where i.uid = %s and r.rst >= %s and r.ret >= %s and r.rid = i.rid"""
    	cur.execute(query,(ID,now_seconds,now_seconds+120 ))
    	record = cur.fetchone()
	rid = record[0]
	body = {"rid" :rid}
	req = open_channel_request(ID,apikey,body)
	check(req,200)

def open_channel_no_rid(ID,apikey):
	body = {"rid": ""}
	req = open_channel_request(ID,apikey,body)
	check(req,400)

def open_channel_someoneelse_rid(ID,apikey):
	query = """select * from reservations_info where uid != %s"""
    	cur.execute(query,(ID, ))
    	record = cur.fetchone()
	rid = record[0]
	body = {"rid": rid}
	req = open_channel_request(ID,apikey,body)
	check(req,400)

def open_channel_invalid_rid(ID,apikey):
	body = {"rid": "".join([random.choice(string.ascii_lowercase + string.digits) for i in range(10)])}
	req = open_channel_request(ID,apikey,body)
	check(req,400)

def open_channel_outside_reservationtime(ID,apikey):
	query = """select * from reservations_info as i, reservations as r where i.uid = %s and r.rid = i.rid and r.state = %s"""
    	cur.execute(query,(ID,now_seconds,now_seconds+120,'inactive' ))
    	record = cur.fetchone()
	rid = record[0]
	body = {"rid": rid}
	req = open_channel_request(ID,apikey,body)
	check(req,405)

def open_channel_when_high_priority_task_running(ID,apikey):
	body = {"rid" :"yjxhq9ja9esh369pfv3d6kebrdazvv6b"}
	req = open_channel_request(ID,apikey,body)
	check(req,409)



def suspend_channel_someoneelse_rid(ID,apikey):
	body = {"rid":"dhb0q7dmuhst21rb9fj6lmkzs6l6ast7"}
	req = suspend_channel_request(ID,apikey,body)
	check(req,400)

def suspend_channel_valid_rid(ID,apikey):
	body = {"rid" :"vtydk87fdgjw6i0dotszidv9rpwkc7qv"}
	req = suspend_channel_request(ID,apikey,body)
	check(req,200)

def suspend_channel_invalid_rid(ID,apikey):
	body = {"rid" :"nf6e02tjylfa4bje1qyhi4e9g2"}
	req = suspend_channel_request(ID,apikey,body)
	check(req,400)

def suspend_channel_without_opening(ID,apikey):
	body = {"rid" :"7vpkdf996p1spi7wcwmvbwnk56r9ct20"}
	req = suspend_channel_request(ID,apikey,body)
	check(req,400)

def suspend_channel_valid_rid_invalid_cid(ID,apikey):
	body = {"rid" :"vtydk87fdgjw6i0dotszidv9rpwkc7qv","cid" :"asdhghsasghj37132571ghhv"}
	req = suspend_channel_request(ID,apikey,body)
	check(req,200)

def suspend_channel_valid_cid_invalid_rid(ID,apikey):
	body = {"cid" :"fqqgmwyvxhz5cxxsjr12nyz5ebqb3ieh","rid":"ghcjbhu75674vvgbht6yvj"}
	req = suspend_channel_request(ID,apikey,body)
	check(req,200)

def suspend_channel_valid_cid(ID,apikey):
	body = {"cid" :"fqqgmwyvxhz5cxxsjr12nyz5ebqb3ieh"}
	req = suspend_channel_request(ID,apikey,body)
	check(req,200)

def suspend_channel_no_ridandcid(ID,apikey):
	body = {}
	req = suspend_channel_request(ID,apikey,body)
	check(req,400)



def resume_channel_someoneelse_rid(ID,apikey):
	body = {"rid":"dhb0q7dmuhst21rb9fj6lmkzs6l6ast7"}
	req = resume_channel_request(ID,apikey,body)
	check(req,400)

def resume_channel_valid_rid(ID,apikey):
	body = {"rid" :"vtydk87fdgjw6i0dotszidv9rpwkc7qv"}
	req = resume_channel_request(ID,apikey,body)
	check(req,200)

def resume_channel_invalid_rid(ID,apikey):
	body = {"rid" :"vtydk87fdgjw6i0dotszidv9rpwkc7qv"}
	req = resume_channel_request(ID,apikey,body)
	check(req,400)

def resume_channel_without_opening(ID,apikey):
	body = {"rid" :"7vpkdf996p1spi7wcwmvbwnk56r9ct20"}
	req = resume_channel_request(ID,apikey,body)
	check(req,400)

def resume_channel_without_suspending(ID,apikey):
	body = {"rid" :"ccijtll0pqvhxchokku2ogkvj0ac6fl0"}
	req = resume_channel_request(ID,apikey,body)
	check(req,400)

def resume_channel_valid_rid_invalid_cid(ID,apikey):
	body = {"rid" :"vtydk87fdgjw6i0dotszidv9rpwkc7qv","cid" :"asdhghsasghj37132571ghhv"}
	req = resume_channel_request(ID,apikey,body)
	check(req,200)

def resume_channel_valid_cid_invalid_rid(ID,apikey):
	body = {"cid" :"fqqgmwyvxhz5cxxsjr12nyz5ebqb3ieh","rid":"ghcjbhu75674vvgbht6yvj"}
	req = resume_channel_request(ID,apikey,body)
	check(req,200)

def resume_channel_valid_cid(ID,apikey):
	body = {"cid" :"fqqgmwyvxhz5cxxsjr12nyz5ebqb3ieh"}
	req = resume_channel_request(ID,apikey,body)
	check(req,200)

def resume_channel_no_ridandcid(ID,apikey):
	body = {}
	req = resume_channel_request(ID,apikey,body)
	check(req,400)



def close_channel_someoneelse_rid(ID,apikey):
	body = {"rid":"dhb0q7dmuhst21rb9fj6lmkzs6l6ast7"}
	req = close_channel_request(ID,apikey,body)
	check(req,400)

def close_channel_valid_rid(ID,apikey):
	body = {"rid" :"vtydk87fdgjw6i0dotszidv9rpwkc7qv"}
	req = close_channel_request(ID,apikey,body)
	check(req,200)

def close_channel_invalid_rid(ID,apikey):
	body = {"rid" :"a1b0ms0gz2b62w43ddj6hyf9sceb"}
	req = close_channel_request(ID,apikey,body)
	check(req,400)

def close_channel_without_opening(ID,apikey):
	body = {"rid" :"7vpkdf996p1spi7wcwmvbwnk56r9ct20"}
	req = close_channel_request(ID,apikey,body)
	check(req,400)

def close_channel_valid_rid_invalid_cid(ID,apikey):
	body = {"rid" :"d8xgotmiv9jzr27gwfvwx1vnhlja7hc3","cid" :"asdhghsasghj37132571ghhv"}
	req = close_channel_request(ID,apikey,body)
	check(req,200)

def close_channel_valid_cid_invalid_rid(ID,apikey):
	body = {"cid" :"ccijtll0pqvhxchokku2ogkvj0ac6fl0","rid":"ghcjbhu75674vvgbht6yvj"}
	req = close_channel_request(ID,apikey,body)
	check(req,200)

def close_channel_valid_cid(ID,apikey):
	body = {"cid" :"s5hqk1mqyjj5cdte60w3tkhyap4hkveq"}
	req = close_channel_request(ID,apikey,body)
	check(req,200)

def close_channel_no_ridandcid(ID,apikey):
	body = {}
	req = close_channel_request(ID,apikey,body)
	check(req,400)



def create_syncconfiguration_validcase(ID,apikey):
	data = {"rid" : "vtydk87fdgjw6i0dotszidv9rpwkc7qv", "configurations": {"volume":80}}
	req = create_syncconfiguration_request(ID,apikey,data)
	check(req,200)	

def create_syncconfiguration_already_configured(ID,apikey):
	data = {"rid" : "vtydk87fdgjw6i0dotszidv9rpwkc7qv", "configurations": {"volume":80}}
	req = create_syncconfiguration_request(ID,apikey,data)
	check(req,405)	

def create_syncconfiguration_valid_did(ID,apikey):
	data = {"rid" : "vtydk87fdgjw6i0dotszidv9rpwkc7qv", "configurations": {"volume":80},"id":["dsgahh2323"]}
	req = create_syncconfiguration_request(ID,apikey,data)
	check(req,200)

def create_syncconfiguration_no_configurations(ID,apikey):
	data = {"rid" : "73efedun43o8d8awblszw8oh1l42plo3"}
	req = create_syncconfiguration_request(ID,apikey,data)
	check(req,400)

def create_syncconfiguration_invalid_did(ID,apikey):
	data = {"rid" : "73efedun43o8d8awblszw8oh1l42plo3","id":["jsjhjxsbj"],"configurations": {"volume":80}}
	req = create_syncconfiguration_request(ID,apikey,data)
	check(req,400)

def create_syncconfiguration_unreserved_did(ID,apikey):
	data = {"rid" : "73efedun43o8d8awblszw8oh1l42plo3","id":["chdbsuwqy13"],"configurations": {"volume":80}}
	req = create_syncconfiguration_request(ID,apikey,data)
	check(req,400)

def create_syncconfiguration_no_ridandcid(ID,apikey):
	data = {"configurations": {"volume":80}}
	req = create_syncconfiguration_request(ID,apikey,data)
	check(req,400)

def create_syncconfiguration_someoneelse_rid(ID,apikey):
	data = {"rid":"dhb0q7dmuhst21rb9fj6lmkzs6l6ast7","configurations": {"volume":80}}
	req = create_syncconfiguration_request(ID,apikey,data)
	check(req,400)

def create_syncconfiguration_no_cid(ID,apikey):
	data = {"rid":"vtydk87fdgjw6i0dotszidv9rpwkc7qv","configurations": {"volume":80},"id":["dsgahh2323"]}
	req = create_syncconfiguration_request(ID,apikey,data)
	check(req,200)

def create_syncconfiguration_no_rid(ID,apikey):
	data = {"cid":"fqqgmwyvxhz5cxxsjr12nyz5ebqb3ieh","configurations": {"volume":80},"id":["dsgahh2323"]}
	req = create_syncconfiguration_request(ID,apikey,data)
	check(req,200)

def create_syncconfiguration_invalid_cidandrid(ID,apikey):
	data = {"rid":"vtydk87fdgjw6i0dotszidvhgcc9rpwkc7qv","cid":"gllmt6ee2uk80xg24taq15p37epx8rpg","configurations": {"volume":80},"id":["dsgahh2323"]}
	req = create_syncconfiguration_request(ID,apikey,data)
	check(req,400)

def create_syncconfiguration_valid_rid_invalid_cid(ID,apikey):
	data = {"rid":"vtydk87fdgjw6i0dotszidv9rpwkc7qv","cid":"gllmt6ee2uk80xg24taq15p37epx8rpg","configurations": {"volume":80},"id":["dsgahh2323"]}
	req = create_syncconfiguration_request(ID,apikey,data)
	check(req,200)

def create_syncconfiguration_valid_cid_invalid_rid(ID,apikey):
	data = {"rid":"bhra7mk2sj5bmkdfz02ecemr60jl7","cid":"fqqgmwyvxhz5cxxsjr12nyz5ebqb3ieh","configurations": {"volume":80},"id":["dsgahh2323"]}
	req = create_syncconfiguration_request(ID,apikey,data)
	check(req,200)

def create_syncconfiguration_not_operation_time(ID,apikey):
	data = {"rid":"7vpkdf996p1spi7wcwmvbwnk56r9ct20","configurations": {"volume":80},"id":["dsgahh2323"]}
	req = create_syncconfiguration_request(ID,apikey,data)
	check(req,400)



def update_syncconfiguration_no_configurations_made(ID,apikey):
	data = {"rid" : "73efedun43o8d8awblszw8oh1l42plo3"}
	req = update_syncconfiguration_request(ID,apikey,data)
	check(req,404)

def update_syncconfiguration_someoneelse_rid(ID,apikey):
	data = {"rid":"dhb0q7dmuhst21rb9fj6lmkzs6l6ast7","configurations": {"volume":80}}
	req = update_syncconfiguration_request(ID,apikey,data)
	check(req,400)

def update_syncconfiguration_no_ridandcid(ID,apikey):
	data = {"configurations": {"volume":80}}
	req = update_syncconfiguration_request(ID,apikey,data)
	check(req,400)

def update_syncconfiguration_no_cid(ID,apikey):
	data = {"rid":"vtydk87fdgjw6i0dotszidv9rpwkc7qv","configurations": {"volume":80}}
	req = update_syncconfiguration_request(ID,apikey,data)
	check(req,200)

def update_syncconfiguration_no_rid(ID,apikey):
	data = {"cid":"fqqgmwyvxhz5cxxsjr12nyz5ebqb3ieh","configurations": {"volume":80}}
	req = update_syncconfiguration_request(ID,apikey,data)
	check(req,200)

def update_syncconfiguration_validcase(ID,apikey):
	data = {"rid" : "vtydk87fdgjw6i0dotszidv9rpwkc7qv", "configurations": {"volume":80}}
	req = update_syncconfiguration_request(ID,apikey,data)
	check(req,200)	

def update_syncconfiguration_no_configurations(ID,apikey):
	data = {"rid" : "vtydk87fdgjw6i0dotszidv9rpwkc7qv"}
	req = update_syncconfiguration_request(ID,apikey,data)
	check(req,400)	

def update_syncconfiguration_valid_cid_invalid_rid(ID,apikey):
	data = {"rid":"bhra7mk2sj5bmkdfz02ecemr60jl7","cid":"fqqgmwyvxhz5cxxsjr12nyz5ebqb3ieh","configurations": {"volume":80}}
	req = update_syncconfiguration_request(ID,apikey,data)
	check(req,200)

def update_syncconfiguration_valid_rid_invalid_cid(ID,apikey):
	data = {"rid":"vtydk87fdgjw6i0dotszidv9rpwkc7qv","cid":"gllmt6ee2uk80xg24taq15p37epx8rpg","configurations": {"volume":80}}
	req = update_syncconfiguration_request(ID,apikey,data)
	check(req,200)

def update_syncconfiguration_invalid_cidandrid(ID,apikey):
	data = {"rid":"bhra7mk2sj5bmkdfz02ecemr60jl7","cid":"gllmt6ee2uk80xg24taq15p37epx8rpg","configurations": {"volume":80}}
	req = update_syncconfiguration_request(ID,apikey,data)
	check(req,400)

def update_syncconfiguration_not_operation_time(ID,apikey):
	data = {"rid":"7vpkdf996p1spi7wcwmvbwnk56r9ct20","configurations": {"volume":80}}
	req = update_syncconfiguration_request(ID,apikey,data)
	check(req,400)



def delete_syncconfiguration_no_configurations_made(ID,apikey):
	data = {"rid" : "73efedun43o8d8awblszw8oh1l42plo3"}
	req = delete_syncconfiguration_request(ID,apikey,data)
	check(req,404)

def delete_syncconfiguration_someoneelse_rid(ID,apikey):
	data = {"rid":"dhb0q7dmuhst21rb9fj6lmkzs6l6ast7"}
	req = update_syncconfiguration_request(ID,apikey,data)
	check(req,400)

def delete_syncconfiguration_no_ridandcid(ID,apikey):
	data = {}
	req = delete_syncconfiguration_request(ID,apikey,data)
	check(req,400)

def delete_syncconfiguration_no_cid(ID,apikey):
	data = {"rid":"vtydk87fdgjw6i0dotszidv9rpwkc7qv"}
	req = delete_syncconfiguration_request(ID,apikey,data)
	check(req,200)

def delete_syncconfiguration_no_rid(ID,apikey):
	data = {"cid":"fqqgmwyvxhz5cxxsjr12nyz5ebqb3ieh"}
	req = delete_syncconfiguration_request(ID,apikey,data)
	check(req,200)

def delete_syncconfiguration_validcase(ID,apikey):
	data = {"rid" : "vtydk87fdgjw6i0dotszidv9rpwkc7qv"}
	req = delete_syncconfiguration_request(ID,apikey,data)
	check(req,200)	

def delete_syncconfiguration_valid_cid_invalid_rid(ID,apikey):
	data = {"rid":"bhra7mk2sj5bmkdfz02ecemr60jl7","cid":"fqqgmwyvxhz5cxxsjr12nyz5ebqb3ieh"}
	req = delete_syncconfiguration_request(ID,apikey,data)
	check(req,200)

def delete_syncconfiguration_valid_rid_invalid_cid(ID,apikey):
	data = {"rid":"vtydk87fdgjw6i0dotszidv9rpwkc7qv","cid":"gllmt6ee2uk80xg24taq15p37epx8rpg"}
	req = delete_syncconfiguration_request(ID,apikey,data)
	check(req,200)

def delete_syncconfiguration_invalid_cidandrid(ID,apikey):
	data = {"rid":"bhra7mk2sj5bmkdfz02ecemr60jl7","cid":"gllmt6ee2uk80xg24taq15p37epx8rpg"}
	req = delete_syncconfiguration_request(ID,apikey,data)
	check(req,400)

def delete_syncconfiguration_not_operation_time(ID,apikey):
	data = {"rid":"7vpkdf996p1spi7wcwmvbwnk56r9ct20"}
	req = delete_syncconfiguration_request(ID,apikey,data)
	check(req,400)



def create_syncwrite_validcase(ID,apikey):
	data = {"rid" : "vtydk87fdgjw6i0dotszidv9rpwkc7qv", "content": {"message":"welcome"}}
	req = create_syncwrite_request(ID,apikey,data)
	check(req,200)

def create_syncwrite_already_written(ID,apikey):
	data = {"rid" : "vtydk87fdgjw6i0dotszidv9rpwkc7qv", "content": {"message":"welcome"}}
	req = create_syncwrite_request(ID,apikey,data)
	check(req,405)

def create_syncwrite_valid_did(ID,apikey):
	data = {"rid" : "vtydk87fdgjw6i0dotszidv9rpwkc7qv", "content": {"message":"welcome"},"id":["dsgahh2323"]}
	req = create_syncwrite_request(ID,apikey,data)
	check(req,200)

def create_syncwrite_no_content(ID,apikey):
	data = {"rid" : "vtydk87fdgjw6i0dotszidv9rpwkc7qv"}
	req = create_syncwrite_request(ID,apikey,data)
	check(req,400)

def create_syncwrite_unreserved_did(ID,apikey):
	data = {"rid" : "vtydk87fdgjw6i0dotszidv9rpwkc7qv","id":["chdbsuwqy13"], "content": {"message":"welcome"}}
	req = create_syncwrite_request(ID,apikey,data)
	check(req,400)

def create_syncwrite_invalid_did(ID,apikey):
	data = {"rid" : "vtydk87fdgjw6i0dotszidv9rpwkc7qv","id":["chdbsuw"], "content": {"message":"welcome"}}
	req = create_syncwrite_request(ID,apikey,data)
	check(req,400)

def create_syncwrite_no_ridorcid(ID,apikey):
	data = {"content": {"message":"welcome"},"id":["chdbsuwqy13"]}
	req = create_syncwrite_request(ID,apikey,data)
	check(req,400)

def create_syncwrite_no_cid(ID,apikey):
	data = {"rid":"vtydk87fdgjw6i0dotszidv9rpwkc7qv","content": {"message":"welcome"},"id":["dsgahh2323"]}
	req = create_syncwrite_request(ID,apikey,data)
	check(req,200)

def create_syncwrite_no_rid(ID,apikey):
	data = {"cid":"fqqgmwyvxhz5cxxsjr12nyz5ebqb3ieh","content": {"message":"welcome"},"id":["dsgahh2323"]}
	req = create_syncwrite_request(ID,apikey,data)
	check(req,200)

def create_syncwrite_invalid_cidandrid(ID,apikey):
	data = {"rid":"bhra7mk2sj5bmkdfz02ecemr60jl7","cid":"gllmt6ee2uk80xg24taq15p37epx8rpg","content": {"message":"welcome"},"id":["dsgahh2323"]}
	req = create_syncwrite_request(ID,apikey,data)
	check(req,400)

def create_syncwrite_valid_rid_invalid_cid(ID,apikey):
	data = {"rid":"vtydk87fdgjw6i0dotszidv9rpwkc7qv","cid":"gllmt6ee2uk80xg24taq15p37epx8rpg","content": {"message":"welcome"},"id":["dsgahh2323"]}
	req = create_syncwrite_request(ID,apikey,data)
	check(req,200)

def create_syncwrite_valid_cid_invalid_rid(ID,apikey):
	data = {"rid":"bhra7mk2sj5bmkdfz02ecemr60jl7","cid":"fqqgmwyvxhz5cxxsjr12nyz5ebqb3ieh","content": {"message":"welcome"},"id":["dsgahh2323"]}
	req = create_syncwrite_request(ID,apikey,data)
	check(req,200)

def create_syncwrite_someoneelse_rid(ID,apikey):
	data = {"rid":"dhb0q7dmuhst21rb9fj6lmkzs6l6ast7","content": {"message":"welcome"},"id":["dsgahh2323"]}
	req = create_syncwrite_request(ID,apikey,data)
	check(req,400)

def create_syncwrite_not_operation_time(ID,apikey):
	data = {"rid":"7vpkdf996p1spi7wcwmvbwnk56r9ct20","content": {"message":"welcome"},"id":["dsgahh2323"]}
	req = create_syncwrite_request(ID,apikey,data)
	check(req,400)



def update_syncwrite_no_content(ID,apikey):
	data = {"rid" : "vtydk87fdgjw6i0dotszidv9rpwkc7qv"}
	req = update_syncwrite_request(ID,apikey,data)
	check(req,400)

def update_syncwrite_someoneelse_rid(ID,apikey):
	data = {"rid":"dhb0q7dmuhst21rb9fj6lmkzs6l6ast7","configurations": {"volume":80}}
	req = update_syncwrite_request(ID,apikey,data)
	check(req,400)

def update_syncwrite_no_ridandcid(ID,apikey):
	data = {"configurations": {"volume":80}}
	req = update_syncwrite_request(ID,apikey,data)
	check(req,400)

def update_syncwrite_no_cid(ID,apikey):
	data = {"rid":"vtydk87fdgjw6i0dotszidv9rpwkc7qv","content": {"message":"welcome"},"id":["dsgahh2323"]}
	req = update_syncwrite_request(ID,apikey,data)
	check(req,200)

def update_syncwrite_no_rid(ID,apikey):
	data = {"cid":"fqqgmwyvxhz5cxxsjr12nyz5ebqb3ieh","content": {"message":"welcome"},"id":["dsgahh2323"]}
	req = update_syncwrite_request(ID,apikey,data)
	check(req,200)

def update_syncwrite_validcase(ID,apikey):
	data = {"rid" : "vtydk87fdgjw6i0dotszidv9rpwkc7qv", "content": {"message":"welcome"}}
	req = update_syncwrite_request(ID,apikey,data)
	check(req,200)	

def update_syncwrite_valid_cid_invalid_rid(ID,apikey):
	data = {"rid":"bhra7mk2sj5bmkdfz02ecemr60jl7","cid":"fqqgmwyvxhz5cxxsjr12nyz5ebqb3ieh","content": {"message":"welcome"},"id":["dsgahh2323"]}
	req = update_syncwrite_request(ID,apikey,data)
	check(req,200)

def update_syncwrite_valid_rid_invalid_cid(ID,apikey):
	data = {"rid":"vtydk87fdgjw6i0dotszidv9rpwkc7qv","cid":"gllmt6ee2uk80xg24taq15p37epx8rpg","content": {"message":"welcome"},"id":["dsgahh2323"]}
	req = update_syncwrite_request(ID,apikey,data)
	check(req,200)

def update_syncwrite_invalid_cidandrid(ID,apikey):
	data = {"rid":"bhra7mkbmkdfz02ecemr60jl7","cid":"gllmt6ee2uk24taq15p37epx8rpg","content": {"message":"welcome"},"id":["chdbsuwqy13"]}
	req = update_syncwrite_request(ID,apikey,data)
	check(req,400)

def update_syncwrite_not_operation_time(ID,apikey):
	data = {"rid":"vtuz737gf7jk4ni9e25poizmasstp0j2","content": {"message":"welcome"},"id":["chdbsuwqy13"]}
	req = update_syncwrite_request(ID,apikey,data)
	check(req,400)



def delete_syncwrite_no_content_written(ID,apikey):
	data = {"rid" : "6h1zpptzut63i44w6v8am0oc3r1bfjk3"}
	req = delete_syncwrite_request(ID,apikey,data)
	check(req,404)

def delete_syncwrite_someoneelse_rid(ID,apikey):
	data = {"rid":"dhb0q7dmuhst21rb9fj6lmkzs6l6ast7"}
	req = update_syncwrite_request(ID,apikey,data)
	check(req,400)

def delete_syncwrite_no_ridandcid(ID,apikey):
	data = {"configurations": {"volume":80}}
	req = delete_syncwrite_request(ID,apikey,data)
	check(req,400)

def delete_syncwrite_no_cid(ID,apikey):
	data = {"rid":"vtydk87fdgjw6i0dotszidv9rpwkc7qv"}
	req = delete_syncwrite_request(ID,apikey,data)
	check(req,200)

def delete_syncwrite_no_rid(ID,apikey):
	data = {"cid":"fqqgmwyvxhz5cxxsjr12nyz5ebqb3ieh"}
	req = delete_syncwrite_request(ID,apikey,data)
	check(req,200)

def delete_syncwrite_validcase(ID,apikey):
	data = {"rid" : "vtydk87fdgjw6i0dotszidv9rpwkc7qv"}
	req = delete_syncwrite_request(ID,apikey,data)
	check(req,200)	

def delete_syncwrite_valid_cid_invalid_rid(ID,apikey):
	data = {"rid":"bhra7mk2sj5bmkdfz02ecemr60jl7","cid":"fqqgmwyvxhz5cxxsjr12nyz5ebqb3ieh"}
	req = delete_syncwrite_request(ID,apikey,data)
	check(req,200)

def delete_syncwrite_valid_rid_invalid_cid(ID,apikey):
	data = {"rid":"vtydk87fdgjw6i0dotszidv9rpwkc7qv","cid":"gllmt6ee2uk80xg24taq15p37epx8rpg"}
	req = delete_syncwrite_request(ID,apikey,data)
	check(req,200)

def delete_syncwrite_invalid_cidandrid(ID,apikey):
	data = {"rid":"bhra7mk2sj5bmkdfz02ecemr60jl7","cid":"gllmt6ee2uk80xg24taq15p37epx8rpg"}
	req = delete_syncwrite_request(ID,apikey,data)
	check(req,400)

def delete_syncwrite_not_operation_time(ID,apikey):
	data = {"rid":"vtuz737gf7jk4ni9e25poizmasstp0j2"}
	req = delete_syncwrite_request(ID,apikey,data)
	check(req,400)



def create_asyncconfiguration_validcase(ID,apikey):
	query = """select * from reservations_info where uid = %s"""
    	cur.execute(query,(ID, ))
    	record = cur.fetchone()
	rid = record[0]
	data = {"rid" : rid, "configurations": {"volume":80}}
	req = create_asyncconfiguration_request(ID,apikey,data)
	check(req,200)

def create_asyncconfiguration_valid_did(ID,apikey):
	query = """select * from reservations_info where uid = %s"""
    	cur.execute(query,(ID, ))
    	record = cur.fetchone()
	rid = record[0]
	query = """select * from device_state where rid = %s"""
    	cur.execute(query,(rid, ))
    	record = cur.fetchone()
	
	for did in record[1]:
		data = {"rid" : rid, "configurations": {"volume":80},"id":did}
		req = create_asyncconfiguration_request(ID,apikey,data)
		check(req,200)

def create_asyncconfiguration_no_configurations(ID,apikey):
	query = """select * from reservations_info where uid = %s"""
    	cur.execute(query,(ID, ))
    	record = cur.fetchone()
	rid = record[0]
	data = {"rid" : rid}
	req = create_asyncconfiguration_request(ID,apikey,data)
	check(req,400)

def create_asyncconfiguration_invalid_did(ID,apikey):
	query = """select * from reservations_info where uid = %s"""
    	cur.execute(query,(ID, ))
    	record = cur.fetchone()
	rid = record[0]
	data = {"rid" : rid,"id":["".join([random.choice(string.ascii_lowercase + string.digits) for i in range(5)])], "configurations": {"volume":80}}
	req = create_asyncconfiguration_request(ID,apikey,data)
	check(req,400)

def create_asyncconfiguration_unreserved_did(ID,apikey):
	query = """select * from reservations_info where uid = %s"""
    	cur.execute(query,(ID, ))
    	record = cur.fetchone()
	rid = record[0]
	did = "".join([random.choice(string.ascii_lowercase + string.digits) for i in range(5)])
	cur.execute("""INSERT INTO devices (did,accessibility) VALUES(%s,%s)""",(did,'public'))
	connection.commit()	
	data = {"rid" : rid,"id":[did], "configurations": {"volume":80}}
	req = create_asyncconfiguration_request(ID,apikey,data)
	check(req,400)

def create_asyncconfiguration_no_rid(ID,apikey):
	data = {"configurations": {"volume":80}}
	req = create_asyncconfiguration_request(ID,apikey,data)
	check(req,400)

def create_asyncconfiguration_someoneelse_rid(ID,apikey):
	query = """select * from reservations_info where uid != %s"""
    	cur.execute(query,(ID, ))
    	record = cur.fetchone()
	rid = record[0]
	data = {"rid":rid,"configurations": {"volume":80}}
	req = create_asyncconfiguration_request(ID,apikey,data)
	check(req,400)



def create_asyncwrite_validcase(ID,apikey):
	query = """select * from reservations_info where uid = %s"""
    	cur.execute(query,(ID, ))
    	record = cur.fetchone()
	rid = record[0]
	data = {"rid" : rid, "content": {"message":"welcome"}}
	req = create_asyncwrite_request(ID,apikey,data)
	check(req,200)

def create_asyncwrite_valid_did(ID,apikey):
	query = """select * from reservations_info where uid = %s"""
    	cur.execute(query,(ID, ))
    	record = cur.fetchone()
	rid = record[0]
	query = """select * from device_state where rid = %s"""
    	cur.execute(query,(rid, ))
    	record = cur.fetchone()
	for did in record[1]:
		data = {"rid" : rid, "content": {"message":"welcome"},"id":did}
		req = create_asyncwrite_request(ID,apikey,data)
		check(req,200)

def create_asyncwrite_no_content(ID,apikey):
	query = """select * from reservations_info where uid = %s"""
    	cur.execute(query,(ID, ))
    	record = cur.fetchone()
	rid = record[0]
	data = {"rid" : rid}
	req = create_asyncwrite_request(ID,apikey,data)
	check(req,400)

def create_asyncwrite_unreserved_did(ID,apikey):
	query = """select * from reservations_info where uid = %s"""
    	cur.execute(query,(ID, ))
    	record = cur.fetchone()
	rid = record[0]
	did = "".join([random.choice(string.ascii_lowercase + string.digits) for i in range(5)])
	cur.execute("""INSERT INTO devices (did,accessibility) VALUES(%s,%s)""",(did,'public'))
	connection.commit()	
	data = {"rid" : rid,"id":[did], "content": {"message":"welcome"}}
	req = create_asyncwrite_request(ID,apikey,data)
	check(req,400)

def create_asyncwrite_invalid_did(ID,apikey):
	query = """select * from reservations_info where uid = %s"""
    	cur.execute(query,(ID, ))
    	record = cur.fetchone()
	rid = record[0]
	data = {"rid" : rid,"id":["".join([random.choice(string.ascii_lowercase + string.digits) for i in range(5)])], "content": {"message":"welcome"}}
	req = create_asyncwrite_request(ID,apikey,data)
	check(req,400)

def create_asyncwrite_no_rid(ID,apikey):
	data = {"content": {"message":"welcome"}}
	req = create_asyncwrite_request(ID,apikey,data)
	check(req,400)

def create_asyncwrite_someoneelse_rid(ID,apikey):
	query = """select * from reservations_info where uid != %s"""
    	cur.execute(query,(ID, ))
    	record = cur.fetchone()
	rid = record[0]
	data = {"rid":rid,"content": {"message":"welcome"},"id":["asdscd3213"]}
	req = create_asyncwrite_request(ID,apikey,data)
	check(req,400)



def device_status_validcase_without_did(ID,apikey):
	query = """select * from configure as c, reservations_info as r where r.uid = %s and r.rid = c.rid"""
    	cur.execute(query,(ID, ))
    	record = cur.fetchone()
	data = {"rid" : record[0]}
	req = device_status_request(ID,apikey,data)
	check(req,200)

def device_status_validcase_with_did(ID,apikey):
	query = """select * from device_state as s, configure as c, reservations_info as r where r.uid = %s and r.rid = s.rid and c.rid = r.rid"""
    	cur.execute(query,(ID, ))
    	record = cur.fetchone()
	for did in record[1]:
		data = {"rid" : record[0],"did": did}
		req = device_status_request(ID,apikey,data)
		check(req,200)

def device_status_with_invalid_did(ID,apikey):
	query = """select * from configure as c, reservations_info as r where r.uid = %s and r.rid = c.rid"""
    	cur.execute(query,(ID, ))
    	record = cur.fetchone()
	data = {"rid" : record[0],"did": "".join([random.choice(string.ascii_lowercase + string.digits) for i in range(5)])}
	req = device_status_request(ID,apikey,data)
	check(req,400)

def device_status_with_configurations_not_made(ID,apikey):
	query = """select * from configure as c, reservations_info as r where r.uid = %s and r.rid != c.rid"""
    	cur.execute(query,(ID, ))
    	record = cur.fetchone()
	data = {"rid" : record[4]}
	req = device_status_request(ID,apikey,data)
	check(req,204)

def device_status_with_invalid_rid(ID,apikey):
	data = {"rid" : "".join([random.choice(string.ascii_lowercase + string.digits) for i in range(10)])}
	req = device_status_request(ID,apikey,data)
	check(req,400)

def device_status_with_no_rid(ID,apikey):
	query = """select * from devices"""
    	cur.execute(query,(ID, ))
    	record = cur.fetchone()
	did = record[0]
	data = {"did":did}
	req = device_status_request(ID,apikey,data)
	check(req,400)



def operational_status_validcase_without_did(ID,apikey):
	query = """select * from reservations_info where uid = %s"""
    	cur.execute(query,(ID, ))
    	record = cur.fetchone()
	rid = record[0]
	data = {"rid" : rid}
	req = operational_status_request(ID,apikey,data)
	check(req,200)

def operational_status_validcase_with_did(ID,apikey):
	query = """select * from device_state as s, reservations_info as r where r.uid = %s and r.rid = s.rid"""
    	cur.execute(query,(ID, ))
    	record = cur.fetchone()
	for did in record[1]:
		data = {"rid" : record[0],"did": did}
		req = operational_status_request(ID,apikey,data)
		check(req,200)

def operational_status_with_invalid_did(ID,apikey):
	query = """select * from reservations_info where uid = %s"""
    	cur.execute(query,(ID, ))
    	record = cur.fetchone()
	rid = record[0]
	data = {"rid" : rid,"did": "".join([random.choice(string.ascii_lowercase + string.digits) for i in range(10)])}
	req = operational_status_request(ID,apikey,data)
	check(req,400)

def operational_status_with_invalid_rid(ID,apikey):
	rid = "".join([random.choice(string.ascii_lowercase + string.digits) for i in range(10)])
	data = {"rid" : rid}
	req = operational_status_request(ID,apikey,data)
	check(req,400)

def operational_status_with_no_rid(ID,apikey):
	query = """select * from devices"""
    	cur.execute(query,(ID, ))
    	record = cur.fetchone()
	did = record[0]
	data = {"did":did}
	req = operational_status_request(ID,apikey,data)
	check(req,400)



def check_asyncwrite_request(rid):
	query = """select * from write_op where rid = %s and type = %s"""
        cur.execute(query, (rid,'sync'))
    	write_info = cur.fetchone()
	if write_info == None:
		return Response('async write not updated in table',status=500)
	else:
		return Response('async write updated in table',status=200)		

def check_asyncconfigure_request(rid):
	query = """select * from configure where rid = %s and type = %s"""
        cur.execute(query, (rid,'sync'))
    	configure_info = cur.fetchone()
	if configure_info == None:
		return Response('async configure not updated in table',status=500)
	else:
		return Response('async write updated in table',status=200)

def check_asyncwrite(rid):
	req = check_asyncwrite_request(rid)	
	check(req,200)

def check_asyncconfigure(rid):
	req = check_asyncconfigure_request(rid)	
	check(req,200)



def check(response, code):

	assert_exit(response.status_code == code, 'Message = ' + response.text + ' Status code ='+ str(response.status_code))


def assert_exit(condition, error_message):
	try:
        	assert condition
	except AssertionError:
        	print error_message
        	raise


def functional_tests():
	ID = 'alexa'
	apikey = '5mrxpoeig7ohomaqnbra544m3v7o9e2s'
	
	signup_validcase()
	signup_no_id()
	signup_id_already_existing()
	signup_id_length_exceeded()
	signup_id_not_alphanumeric()
	creategroup_validcase(ID, apikey)
	creategroup_groupname_already_existing(ID, apikey)
	creategroup_no_groupname(ID, apikey)
	creategroup_no_body(ID, apikey)
	creategroup_no_resources(ID, apikey)
	creategroup_admin_resources(ID, apikey)
	creategroup_invalid_resources(ID, apikey)
	create_group_groupname_not_alphanumeric(ID, apikey)
	create_group_groupname_length_exceeded(ID, apikey)
	update_group_validcase(ID,apikey)
	update_group_no_resources(ID,apikey)
	update_group_admin_resources(ID,apikey)
	update_group_invalid_resources(ID,apikey)
	update_group_gid_empty(ID,apikey)
	update_group_someoneelse_gid(ID,apikey)
	delete_group_validcase(ID,apikey)
	delete_group_invalid_gid(ID,apikey)
	delete_group_gid_empty(ID,apikey)
	create_reservation_validcase(ID,apikey)
	create_reservation_frequency_duration_given(ID,apikey)
	create_reservation_duration_exceeds_reservationtime(ID,apikey)
	create_reservation_wrong_datetime_format(ID,apikey)
	create_reservation_someoneelse_gid(ID,apikey)
	create_reservation_no_gid(ID,apikey)
	create_reservation_alreadyreserved(ID,apikey)
	create_reservation_frequencygiven_noduration(ID,apikey)
	create_reservation_invalid_frequency(ID,apikey)
	create_reservation_endtime_before_starttime(ID,apikey)
	create_reservation_starttime_already_passed(ID,apikey)
	create_reservation_no_starttime_noendtime(ID,apikey)
	create_reservation_no_starttime(ID,apikey)
	create_reservation_no_endtime(ID,apikey)
	update_reservation_wrong_datetime_format(ID,apikey)
	update_reservation_invalid_frequency(ID,apikey)
	update_reservation_no_starttime_noendtime(ID,apikey)
	update_reservation_invalid_rid(ID,apikey)
	update_reservation_someoneelse_rid(ID,apikey)
	update_reservation_alreadyreserved(ID,apikey)
	update_reservation_invalid_frequency(ID,apikey)
	update_reservation_endtime_before_starttime(ID,apikey)
	update_reservation_starttime_already_passed(ID,apikey)
	update_reservation_duration_exceeds_reservationtime(ID,apikey)
	update_reservation_no_rid(ID,apikey)
	delete_reservation_no_rid(ID,apikey)
	delete_reservation_someoneelse_rid(ID,apikey)
	delete_reservation_invalid_rid(ID,apikey)
	delete_reservation_valid_rid(ID,apikey)

  
	open_channel_validcase(ID,apikey)
	open_channel_no_rid(ID,apikey)
	open_channel_someoneelse_rid(ID,apikey)
	open_channel_invalid_rid(ID,apikey)
	open_channel_outside_reservationtime(ID,apikey)
	open_channel_when_high_priority_task_running(ID,apikey)
	suspend_channel_someoneelse_rid(ID,apikey)
	suspend_channel_valid_rid(ID,apikey)
	suspend_channel_invalid_rid(ID,apikey)
	suspend_channel_without_opening(ID,apikey)
	resume_channel_valid_rid(ID,apikey)
	suspend_channel_valid_rid_invalid_cid(ID,apikey)
	resume_channel_valid_rid_invalid_cid(ID,apikey)
	suspend_channel_valid_cid_invalid_rid(ID,apikey)
	resume_channel_valid_cid_invalid_rid(ID,apikey)
	suspend_channel_valid_cid(ID,apikey)
	resume_channel_valid_cid(ID,apikey)
	suspend_channel_no_ridandcid(ID,apikey)
	resume_channel_someoneelse_rid(ID,apikey)
	resume_channel_invalid_rid(ID,apikey)
	resume_channel_without_opening(ID,apikey)
	resume_channel_without_suspending(ID,apikey)
	resume_channel_no_ridandcid(ID,apikey)
	create_syncconfiguration_validcase(ID,apikey)
	create_syncconfiguration_already_configured(ID,apikey)
	create_syncconfiguration_valid_did(ID,apikey)
	create_syncconfiguration_no_configurations(ID,apikey)
	create_syncconfiguration_invalid_did(ID,apikey)
	create_syncconfiguration_invalid_cidandrid(ID,apikey)
	create_syncconfiguration_unreserved_did(ID,apikey)
	create_syncconfiguration_no_ridandcid(ID,apikey)
	create_syncconfiguration_someoneelse_rid(ID,apikey)
	create_syncconfiguration_no_cid(ID,apikey)
	create_syncconfiguration_no_rid(ID,apikey)
	create_syncconfiguration_valid_rid_invalid_cid(ID,apikey)
	create_syncconfiguration_valid_cid_invalid_rid(ID,apikey)
	create_syncconfiguration_not_operation_time(ID,apikey)
	update_syncconfiguration_no_configurations(ID,apikey)
	update_syncconfiguration_no_configurations_made(ID,apikey)
	update_syncconfiguration_someoneelse_rid(ID,apikey)
	update_syncconfiguration_no_ridandcid(ID,apikey)
	update_syncconfiguration_no_cid(ID,apikey)
	update_syncconfiguration_no_rid(ID,apikey)
	update_syncconfiguration_validcase(ID,apikey)
	update_syncconfiguration_valid_cid_invalid_rid(ID,apikey)
	update_syncconfiguration_valid_rid_invalid_cid(ID,apikey)
	update_syncconfiguration_invalid_cidandrid(ID,apikey)
	update_syncconfiguration_not_operation_time(ID,apikey)
	delete_syncconfiguration_no_configurations_made(ID,apikey)
	delete_syncconfiguration_someoneelse_rid(ID,apikey)
	delete_syncconfiguration_no_ridandcid(ID,apikey)
	delete_syncconfiguration_no_rid(ID,apikey)
	delete_syncconfiguration_invalid_cidandrid(ID,apikey)
	delete_syncconfiguration_not_operation_time(ID,apikey)
	delete_syncconfiguration_valid_cid_invalid_rid(ID,apikey)
	delete_syncconfiguration_valid_rid_invalid_cid(ID,apikey)
	delete_syncconfiguration_validcase(ID,apikey)
	delete_syncconfiguration_no_cid(ID,apikey)
	create_syncwrite_no_content(ID,apikey)
	create_syncwrite_unreserved_did(ID,apikey)
	create_syncwrite_invalid_cidandrid(ID,apikey)
	create_syncwrite_invalid_did(ID,apikey)
	create_syncwrite_no_ridorcid(ID,apikey)
	create_syncwrite_validcase(ID,apikey)
	create_syncwrite_already_written(ID,apikey)
	create_syncwrite_valid_did(ID,apikey)
	create_syncwrite_no_cid(ID,apikey)
	create_syncwrite_no_rid(ID,apikey)
	create_syncwrite_valid_rid_invalid_cid(ID,apikey)
	create_syncwrite_valid_cid_invalid_rid(ID,apikey)
	create_syncwrite_someoneelse_rid(ID,apikey)
	create_syncwrite_not_operation_time(ID,apikey)
	update_syncwrite_no_content(ID,apikey)
	update_syncwrite_someoneelse_rid(ID,apikey)
	update_syncwrite_no_ridandcid(ID,apikey)
	update_syncwrite_no_cid(ID,apikey)
	update_syncwrite_no_rid(ID,apikey)
	update_syncwrite_validcase(ID,apikey)
	update_syncwrite_valid_cid_invalid_rid(ID,apikey)
	update_syncwrite_valid_rid_invalid_cid(ID,apikey)
	update_syncwrite_invalid_cidandrid(ID,apikey)
	update_syncwrite_not_operation_time(ID,apikey)
	delete_syncwrite_validcase(ID,apikey)
	delete_syncwrite_valid_cid_invalid_rid(ID,apikey)
	delete_syncwrite_no_rid(ID,apikey)
	delete_syncwrite_no_cid(ID,apikey)
	delete_syncwrite_no_content_written(ID,apikey)
	delete_syncwrite_someoneelse_rid(ID,apikey)
	delete_syncwrite_no_ridandcid(ID,apikey)
	delete_syncwrite_invalid_cidandrid(ID,apikey)
	delete_syncwrite_not_operation_time(ID,apikey)
	delete_syncwrite_valid_rid_invalid_cid(ID,apikey)
	
  create_asyncconfiguration_validcase(ID,apikey)
	create_asyncconfiguration_valid_did(ID,apikey)
	create_asyncconfiguration_no_configurations(ID,apikey)
	create_asyncconfiguration_invalid_did(ID,apikey)
	create_asyncconfiguration_unreserved_did(ID,apikey)
	create_asyncconfiguration_no_rid(ID,apikey)
	create_asyncconfiguration_someoneelse_rid(ID,apikey)
	create_asyncwrite_validcase(ID,apikey)
	create_asyncwrite_valid_did(ID,apikey)
	create_asyncwrite_no_content(ID,apikey)
	create_asyncwrite_unreserved_did(ID,apikey)
	create_asyncwrite_invalid_did(ID,apikey)
	create_asyncwrite_no_rid(ID,apikey)
	create_asyncwrite_someoneelse_rid(ID,apikey)
	device_status_validcase_without_did(ID,apikey)
	device_status_validcase_with_did(ID,apikey)
	device_status_with_invalid_did(ID,apikey)
	device_status_with_configurations_not_made(ID,apikey)
	device_status_with_invalid_rid(ID,apikey)
	device_status_with_no_rid(ID,apikey)
	operational_status_validcase_without_did(ID,apikey)
	operational_status_validcase_with_did(ID,apikey)
	operational_status_with_invalid_did(ID,apikey)
	operational_status_with_invalid_rid(ID,apikey)
	operational_status_with_no_rid(ID,apikey)


  
	check_asyncwrite(rid)
	check_asyncconfigure(rid)
	close_channel_someoneelse_rid(ID,apikey)
	close_channel_valid_rid(ID,apikey)
	close_channel_invalid_rid(ID,apikey)
	close_channel_without_opening(ID,apikey)
	close_channel_valid_rid_invalid_cid(ID,apikey)
	close_channel_valid_cid_invalid_rid(ID,apikey)
	close_channel_valid_cid(ID,apikey)
	close_channel_no_ridandcid(ID,apikey)
	print 'all test cases passed'
if __name__ == '__main__':
	
	functional_tests()
